package telegram

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/0x0FACED/link-saver-telegram-bot/internal/grpc"
	"github.com/0x0FACED/link-saver-telegram-bot/internal/logger/zaplog"
	"github.com/0x0FACED/link-saver-telegram-bot/internal/utils"
	pdf "github.com/0x0FACED/pdf-proto/pdf_service/gen"
	"github.com/0x0FACED/proto-files/link_service/gen"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"go.uber.org/zap"
)

type CommandHandlerFunc func(ctx context.Context, b *bot.Bot, update *models.Update)

type EventProcessor struct {
	handlers map[string]CommandHandlerFunc
	api      *grpc.APIClient
	logger   *zaplog.ZapLogger
}

func NewEventProcessor(api *grpc.APIClient, logger *zaplog.ZapLogger) *EventProcessor {
	h := &EventProcessor{
		api:      api,
		logger:   logger,
		handlers: make(map[string]CommandHandlerFunc),
	}

	h.initHandlers()

	return h
}

func (h *EventProcessor) initHandlers() {
	h.handlers["/start"] = h.startHandler
	h.handlers["/help"] = h.helpHandler

	//h.handlers["/get"] = h.getLinksHandler
	//h.handlers["/list"] = h.getAllLinksHandler
	//h.handlers["/save"] = h.saveLinkHandler
	//h.handlers["/delete"] = h.deleteLinkHandler
	//h.handlers["/del"] = h.getAllLinksHandlerDelete

	h.handlers["/pdf"] = h.savePDFHandlerHelper
	h.handlers["/savepdf"] = h.savePDFHandler
	//h.handlers["/getpdf"] = h.getPDFHandler
	//h.handlers["/delpdf"] = h.deletePDFHandler
	//h.handlers["/flushpdfs"] = h.deleteAllPDFSHandler
}

func (h *EventProcessor) mainHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update == nil || update.Message == nil {
		h.logger.Debug("mainHandler(): ", zap.String("err", "nil!"))
		return
	}
	h.logger.Debug("mainHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))

	msgParts := strings.Fields(update.Message.Text)
	if len(msgParts) == 0 {
		h.helpHandler(ctx, b, update)
		return
	}

	if handler, ok := h.handlers[msgParts[0]]; ok {
		handler(ctx, b, update)
	} else {
		h.helpHandler(ctx, b, update)
	}
}

func (h *EventProcessor) startHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update == nil || update.Message == nil || h.logger == nil {
		h.logger.Debug("mainHandler(): ", zap.String("err", "nil!"))
		return
	}
	h.logger.Debug("startHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      startMsg_RU,
		ParseMode: models.ParseModeMarkdown,
	})
}

func (h *EventProcessor) saveLinkHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.logger.Debug("saveLinkHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))

	if err := utils.ValidateSaveMessage(update.Message.Text); err != nil {
		msg := "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–∂–¥–∏—Ç–µ –Ω–∞ /save, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞"

		_, _ = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   msg,
		})
		return
	}
	msg := strings.SplitN(update.Message.Text, " ", 3)

	req := &gen.SaveLinkRequest{
		OriginalUrl: msg[1],
		Description: msg[2],
		UserId:      update.Message.From.ID,
	}

	withTimeout, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()

	h.logger.Debug("saveLinkHandler() request: ", zap.Any("req", req))
	_, err := h.api.SaveLink(withTimeout, req)

	if err != nil {
		msg := utils.GetCodeMsgFromError(err)
		h.logger.Error("error by API",
			zap.String("user", update.Message.Chat.Username),
			zap.String("user_msg", update.Message.Text),
			zap.Error(err),
		)

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   msg + " üòû",
		})

		return
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
	})
}

func (h *EventProcessor) deleteLinkHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.logger.Debug("deleteLinkHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))

	h.getAllLinksHandler(ctx, b, update)
}

func (h *EventProcessor) getLinksHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.logger.Debug("getLinksHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))

	msg, err := parseMessage(update.Message.Text, 2)
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
		})
		return
	}

	req := &gen.GetLinksRequest{
		UserId:      update.Message.From.ID,
		Description: msg[1],
	}

	withTimeout, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	resp, err := h.api.GetLinks(withTimeout, req)

	if err != nil {
		h.logger.Error("some error",
			zap.Int64("user", update.Message.From.ID),
			zap.String("mes", update.Message.Text),
			zap.Error(err),
		)

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		})
		return
	}

	h.logger.Debug("got links: ", zap.Any("links", resp.Links))

	h.inlineKbHandler(ctx, b, update, resp.Links, "get")
}

func (h *EventProcessor) getAllLinksHandlerDelete(ctx context.Context, b *bot.Bot, update *models.Update) {

	h.logger.Debug("getAllLinksHandlerDelete(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))
	links := h.getAllLinks(ctx, b, update)
	h.inlineKbHandler(ctx, b, update, links, "del")
}

func (h *EventProcessor) getAllLinksHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.logger.Debug("getAllLinksHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))
	links := h.getAllLinks(ctx, b, update)
	h.inlineKbHandler(ctx, b, update, links, "get")
}

func (h *EventProcessor) savePDFHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.logger.Debug("savePDFHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))

	msg, err := parseMessage(update.Message.Text, 2)
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
		})
		return
	}

	url, err := ValidateAndFixURL(msg[1])
	if err != nil {
		if errors.Is(err, ErrInvalidURL) {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: update.Message.Chat.ID,
				Text:   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –í–≤–µ–¥–∏—Ç–µ /pdf –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
				ReplyParameters: &models.ReplyParameters{
					ChatID:    update.Message.Chat.ID,
					MessageID: update.Message.ID,
				},
			})
		}
		if errors.Is(err, ErrInvalidProtocol) {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: update.Message.Chat.ID,
				Text:   "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 'http' –∏ 'https' –ø—Ä–æ—Ç–æ–∫–æ–ª—ã.",
				ReplyParameters: &models.ReplyParameters{
					ChatID:    update.Message.Chat.ID,
					MessageID: update.Message.ID,
				},
			})
		}
	}
	// –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç: /savepdf <link> <description> <scale> (description - –Ω–∞–∑–≤–∞–Ω–∏–µ) (–ü–û–¢–û–ú)
	// –ø–æ–∫–∞ —á—Ç–æ –±–µ–∑ scale –∏ description
	// –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 16 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω—É —É—Å–ª–æ–≤–Ω–æ, –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è)
	req := &pdf.ConvertToPDFRequest{
		UserId:      update.Message.From.ID,
		OriginalUrl: url,
		Description: "tmp", // –Ω–∞ –≤—Ä–µ–º—è, –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—é —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ä–µ–¥–∏—Å–µ —É —Å–µ—Ä–≤–∏—Å–∞
		Scale:       0.7,   // –Ω–∞ –≤—Ä–µ–º—è
	}

	// –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–æ–ª —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –æ–∂–∏–¥–∞–π—Ç–µ
	waitMsg, _ := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µüôèü•∫",
		ReplyParameters: &models.ReplyParameters{
			ChatID:    update.Message.Chat.ID,
			MessageID: update.Message.ID,
		},
	})

	resp, err := h.api.ConvertToPDF(ctx, req)
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
			ReplyParameters: &models.ReplyParameters{
				ChatID:    update.Message.Chat.ID,
				MessageID: update.Message.ID,
			},
		})
		return
	}

	decompressed, err := decompressPDF(resp.PdfData)
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		})
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –æ–∂–∏–¥–∞–Ω–∏–µ
	//b.DeleteMessage(ctx, &bot.DeleteMessageParams{
	//	ChatID:    update.Message.Chat.ID,
	//	MessageID: waitMsg.ID,
	//})

	waitMsg, _ = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		ChatID:    update.Message.Chat.ID,
		MessageID: waitMsg.ID,
		Text:      "–§–∞–π–ª –≥–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º üì•",
	})

	filepath := fmt.Sprintf("attach://%s", resp.Filename)
	_, err = b.EditMessageMedia(ctx, &bot.EditMessageMediaParams{
		ChatID:    update.Message.Chat.ID,
		MessageID: waitMsg.ID,
		Media: &models.InputMediaDocument{
			Media:           filepath,
			Caption:         "–í–∞—à —Ñ–∞–π–ª! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —á—Ç–µ–Ω–∏–µ–º ‚ù§Ô∏è",
			MediaAttachment: bytes.NewBuffer(decompressed),
		},
	})
	if err != nil {
		b.SendDocument(ctx, &bot.SendDocumentParams{
			ChatID: update.Message.Chat.ID,
			ReplyParameters: &models.ReplyParameters{
				ChatID:    update.Message.Chat.ID,
				MessageID: update.Message.ID,
			},
			Document: &models.InputFileUpload{
				Data:     bytes.NewReader(decompressed),
				Filename: resp.Filename,
			},
		})
	}

	/*b.SendDocument(ctx, &bot.SendDocumentParams{
		ChatID: update.Message.Chat.ID,
		ReplyParameters: &models.ReplyParameters{
			ChatID:    update.Message.Chat.ID,
			MessageID: update.Message.ID,
		},
		Document: &models.InputFileUpload{
			Data:     bytes.NewReader(decompressed),
			Filename: resp.Filename,
		},
	})*/

}

func (h *EventProcessor) getPDFHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.logger.Debug("getPDFHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))

	// –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç: /getpdf <description> (description - –Ω–∞–∑–≤–∞–Ω–∏–µ)
	// –Ø –Ω–µ –±—É–¥—É –¥–æ–±–∞–≤–ª—è—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–¥–µ—Å—å, –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /getpdf —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –≤—Å–µ

	// –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É, —á—Ç–æ–±—ã –æ–Ω –≤–µ—Ä–Ω—É–ª –Ω–∞–º pdf –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –±–∞–π—Ç–æ–≤
	// –ï—Å–ª–∏ —É —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –æ–Ω –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É
	// –ï—Å–ª–∏ –≤—Å–µ –≥—É–¥, —Ç–æ –≤–µ—Ä–Ω–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—ã—Ä–π –º—ã –∑–¥–µ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ pdf

	// –î–û–ë–ê–í–ò–¢–¨ –°–ñ–ê–¢–ò–ï –° –î–í–£–• –°–¢–û–†–û–ù –î–õ–Ø –≠–ö–û–ù–û–ú–ò–ò –ú–ï–°–¢–ê/–¢–†–ê–§–ò–ö–ê
}

// –£–¥–∞–ª—è–µ–º –ø–¥—Ñ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é (–ø—Ä–∏–Ω—Ü–∏–ø —Å—Ö–æ–∂ —Å /del –¥–ª—è —Å—Å—ã–ª–æ–∫, —Ç–æ–∂–µ –±—É–¥–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –¥–∞–≤–∞—Ç—å —é–∑–µ—Ä—É –≤—ã–±—Ä–∞—Ç—å, —á–µ —É–¥–∞–ª–∏—Ç—å)
func (h *EventProcessor) deletePDFHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.logger.Debug("getPDFHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))

}

// –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ –≤—Å–µ PDF –∏–∑ –ø–∞–º—è—Ç–∏
func (h *EventProcessor) deleteAllPDFSHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.logger.Debug("getPDFHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))

}

func (h *EventProcessor) inlineKbHandler(ctx context.Context, b *bot.Bot, update *models.Update, links []*gen.Link, tag string) {
	if len(links) == 0 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ üòû",
		})

		return
	}

	inline := &models.InlineKeyboardMarkup{}
	buttons := make([][]models.InlineKeyboardButton, 0, len(links))
	for i, link := range links {
		text := fmt.Sprintf("%d. %s: %s", i, link.Description, link.OriginalUrl)
		callbackData := fmt.Sprintf("%s:%d:%s", tag, link.LinkId, link.Description)

		button := models.InlineKeyboardButton{
			Text:         text,
			CallbackData: callbackData,
		}

		buttons = append(buttons, []models.InlineKeyboardButton{button})
	}

	inline.InlineKeyboard = buttons

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        "Choose the link",
		ReplyMarkup: inline,
	})
	if err != nil {
		h.logger.Error("err while send message (keyboard)", zap.Error(err))
	}
}

func (h *EventProcessor) helpHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	h.logger.Debug("helpHandler(): "+update.Message.Text, zap.Int64("user", update.Message.From.ID))

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      helpMsg_RU,
		ParseMode: models.ParseModeMarkdown,
	})
}
