// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/0x0FACED/pdf-proto/pdf_service/gen (interfaces: PDFServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=internal/grpc/mocks/mock_pdf_service.go -package=mocks github.com/0x0FACED/pdf-proto/pdf_service/gen PDFServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gen "github.com/0x0FACED/pdf-proto/pdf_service/gen"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPDFServiceClient is a mock of PDFServiceClient interface.
type MockPDFServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPDFServiceClientMockRecorder
}

// MockPDFServiceClientMockRecorder is the mock recorder for MockPDFServiceClient.
type MockPDFServiceClientMockRecorder struct {
	mock *MockPDFServiceClient
}

// NewMockPDFServiceClient creates a new mock instance.
func NewMockPDFServiceClient(ctrl *gomock.Controller) *MockPDFServiceClient {
	mock := &MockPDFServiceClient{ctrl: ctrl}
	mock.recorder = &MockPDFServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDFServiceClient) EXPECT() *MockPDFServiceClientMockRecorder {
	return m.recorder
}

// ConvertToPDF mocks base method.
func (m *MockPDFServiceClient) ConvertToPDF(arg0 context.Context, arg1 *gen.ConvertToPDFRequest, arg2 ...grpc.CallOption) (*gen.ConvertToPDFResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConvertToPDF", varargs...)
	ret0, _ := ret[0].(*gen.ConvertToPDFResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToPDF indicates an expected call of ConvertToPDF.
func (mr *MockPDFServiceClientMockRecorder) ConvertToPDF(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToPDF", reflect.TypeOf((*MockPDFServiceClient)(nil).ConvertToPDF), varargs...)
}

// DeleteAllPDF mocks base method.
func (m *MockPDFServiceClient) DeleteAllPDF(arg0 context.Context, arg1 *gen.DeleteAllPDFRequest, arg2 ...grpc.CallOption) (*gen.DeleteAllPDFResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllPDF", varargs...)
	ret0, _ := ret[0].(*gen.DeleteAllPDFResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllPDF indicates an expected call of DeleteAllPDF.
func (mr *MockPDFServiceClientMockRecorder) DeleteAllPDF(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllPDF", reflect.TypeOf((*MockPDFServiceClient)(nil).DeleteAllPDF), varargs...)
}

// DeletePDF mocks base method.
func (m *MockPDFServiceClient) DeletePDF(arg0 context.Context, arg1 *gen.DeletePDFRequest, arg2 ...grpc.CallOption) (*gen.DeletePDFResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePDF", varargs...)
	ret0, _ := ret[0].(*gen.DeletePDFResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePDF indicates an expected call of DeletePDF.
func (mr *MockPDFServiceClientMockRecorder) DeletePDF(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePDF", reflect.TypeOf((*MockPDFServiceClient)(nil).DeletePDF), varargs...)
}

// GetSavedPDF mocks base method.
func (m *MockPDFServiceClient) GetSavedPDF(arg0 context.Context, arg1 *gen.GetSavedPDFRequest, arg2 ...grpc.CallOption) (*gen.GetSavedPDFResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavedPDF", varargs...)
	ret0, _ := ret[0].(*gen.GetSavedPDFResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedPDF indicates an expected call of GetSavedPDF.
func (mr *MockPDFServiceClientMockRecorder) GetSavedPDF(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedPDF", reflect.TypeOf((*MockPDFServiceClient)(nil).GetSavedPDF), varargs...)
}
